#!/usr/bin/env python
#
# Copyright (c) 2014 Nutanix, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

# Converts PNG file to C header file so it can be embedded into C programs.
#
# Simple dynamic palette and RLE algorithms used for image compression.
#
# Usage:
#
#   png_to_c.py in.png out.h
#

from collections import OrderedDict

import os
import png

def gen_output(row_it, size, planes, alpha=False, palette=None, **kwargs):
  out_palette = OrderedDict((-i, i) for i in xrange(128))
  run = None
  width, height = size

  for row in row_it:
    for x in xrange(width):
      if palette is not None:
        color = palette[row[x]][:3]
      elif alpha:
        color = tuple(row[4*x : 4*x+3])
        assert row[4*x+3] == 255 # Alpha channel has to be opaque
      else:
        color = tuple(row[3*x : 3*x+3])

      try:
        pix = out_palette.pop(color)
      except KeyError:
        # Pixel not in palette, evict the least recently used color in front.
        _, pix = out_palette.popitem(last=False)
        # Emit special palette update signal.
        yield((0x80 | pix, color[0]))
        yield(color[1:])

      # (Re)insert to the back.
      out_palette[color] = pix
      if run is not None and pix == run[0] and run[1] < 255:
        run[1] += 1
      else:
        if run is not None:
          yield(tuple(run))
        run = [pix, 0]
  if run is not None:
    yield(tuple(run))

def main(argv):
  r = png.Reader(argv[1])
  outfile = open(argv[2], "w")

  png_name = argv[1]
  name = os.path.basename(argv[2]).split(".",1)[0]

  width, height, it, prop = r.read()

  outfile.write("""// Autogenerated from %(png_name)s\n
static const u16 %(name)s_image[] = {
  %(width)d, %(height)d,""" % locals())

  for i, item in enumerate(gen_output(it, **prop)):
    if i % 8 == 0:
      outfile.write("\n  ")
    outfile.write("0x%02x%02x, " % item)
  outfile.write("\n};\n")

  i += 1
  print ("Output is %d bytes, %f compression ratio" %
         (i*2, 2.0*i/(width * height * 3.0)))

if __name__ == "__main__":
  import sys
  main(sys.argv)
